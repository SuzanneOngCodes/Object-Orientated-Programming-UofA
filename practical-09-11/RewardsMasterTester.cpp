#include "RewardsMaster.h"#include <iostream>using namespace std;// Unit testing for non-void functions in RewardsMaster classint main(){    int testsRun = 0;    int testsPassed = 0;        {        // Unit testing for the function setDateTaskCompleted()        // Tested using two different input        testsRun++;        RewardsMaster t1;        t1.setDateTaskCompleted(2001, 12, 22);        int year1 = t1.getCompletedYear();        int month1 = t1.getCompletedMonth();        int day1 = t1.getCompletedDay();        if (year1 != 2001 || month1 != 12 || day1 != 22){            cout << "setDateTaskCompleted test failed!" << endl;        }else{            testsPassed++;        }                testsRun++;        RewardsMaster *t2 = new RewardsMaster [1];        t2->setDateTaskCompleted(1970, 4, 8);        int year2 = t2->getCompletedYear();        int month2 = t2->getCompletedMonth();        int day2 = t2->getCompletedDay();        if (year2 != 1970 || month2 != 4 || day2 != 8){            cout << "setDateTaskCompleted test failed!" << endl;        }else{            testsPassed++;        }    }        {        // Unit testing for the function setDateTaskDue        // Tested using two different input        testsRun++;        RewardsMaster t3;        t3.setDateTaskDue(2001, 12, 22);        int year3 = t3.getDueYear();        int month3 = t3.getDueMonth();        int day3 = t3.getDueDay();        if (year3 != 2001 || month3 != 12 || day3 != 22){            cout << "setDateTaskDue test failed!" << endl;        }else{            testsPassed++;        }                testsRun++;        RewardsMaster *t4 = new RewardsMaster [1];        t4->setDateTaskDue(1970, 4, 8);        int year4 = t4->getDueYear();        int month4 = t4->getDueMonth();        int day4 = t4->getDueDay();        if (year4 != 1970 || month4 != 4 || day4 != 8){            cout << "setDateTaskDue test failed!" << endl;        }else{            testsPassed++;        }    }    {        // Unit testing for the function identity_leap_year        // Tested using a leap year        testsRun++;        RewardsMaster t3;        bool result_1 = t3.identity_leap_year(2020);        if (result_1 != 1){            cout << "identify_leap_year Test failed!" << endl;        }else{            testsPassed++;        }                testsRun++;        // Tested using a non leap year        RewardsMaster t4;        bool result_2 = t4.identity_leap_year(1903);        if (result_2 != 0){            cout << "identify_leap_year Test failed!" << endl;        }else{            testsPassed++;        }    }        {        // Unit testing for the function number_of_days_for_all_months        // Tested using the 3rd month of a leap year        testsRun++;        RewardsMaster t5;        int days_1 = t5.number_of_days_for_all_months(3, 2020);        if (days_1 != 31){            cout << "number_of_days_for_all_months Test failed!" << endl;        }else{            testsPassed++;        }                // Tested using the 2nd month of a leap year        testsRun++;        RewardsMaster t6;        int days_2 = t6.number_of_days_for_all_months(2, 2020);        if (days_2 != 29){            cout << "number_of_days_for_all_months Test failed!" << endl;        }else{            testsPassed++;        }                // Tested using the 11th month of a non leap year        testsRun++;        RewardsMaster t7;        int days_3 = t7.number_of_days_for_all_months(11, 2020);        if (days_3 != 30){            cout << "number_of_days_for_all_months Test failed!" << endl;        }else{            testsPassed++;        }                // Tested using the 2nd month of a non leap year        testsRun++;        RewardsMaster t8;        int days_4 = t8.number_of_days_for_all_months(2, 2019);        if (days_4 != 28){            cout << "number_of_days_for_all_months Test failed!" << endl;        }else{            testsPassed++;        }    }        {        // Unit testing for the function difference_in_time        // Tested between two dates with no difference in day        testsRun++;        RewardsMaster t9;        t9.setDateTaskCompleted(2000, 11 ,3);        t9.setDateTaskDue(2000, 11 ,3);        int differ_1 = t9.difference_in_time();        if (differ_1 != 0){            cout << "difference_in_time Test failed!" << endl;        }else{            testsPassed++;        }                // Tested between two dfferent dates        testsRun++;        RewardsMaster t10;        t10.setDateTaskCompleted(1999, 2 ,12);        t10.setDateTaskDue(2011, 07 ,29);        int differ_2 = t10.difference_in_time();        if (differ_2 != 4550){            cout << "difference_in_time Test failed!" << endl;        }else{            testsPassed++;        }    }    {        // Unit testing for the function getRewardsList        // Test whether the function return the exact same list of rewards when called        testsRun++;        RewardsMaster t11;        vector<string> testing = t11.getRewardsList();        vector<string> testing2;        testing2.push_back("  5 points - Have a little treat, like an ice cream or a block of chocolate!");        testing2.push_back(" 10 points - Play your favourite game for an hour!");        testing2.push_back(" 20 points - Enjoy a nice meal out.");        testing2.push_back(" 40 points - Enjoy a shopping trip out for a couple of hours and treat yourself to a nice new toy/shirt.");        testing2.push_back(" 50 points - Take a trip to the beach if it's a nice sunny day!");        testing2.push_back(" 80 points - Have a day out with your friends!");        testing2.push_back("500 points - Go for a holiday!");        if (testing != testing2){            cout << "getRewardsList Test failed!" << endl;        }else{            testsPassed++;        }    }        // Check if any functions does not behave as expected while undergoing unit testing    if (testsPassed < testsRun) {        std::cout << "Tests in RewardsMaster.cpp failed! (" << testsPassed << "/" << testsRun << ")" << std::endl;    }else{        std::cout << "Tests in RewardsMaster.cpp passed! (" << testsPassed << "/" << testsRun << ")" << std::endl;    }        return 0;}